##############################################################################
# DOCKER CHEATSHEET (中文速查表)  -  by Joxos (created on 2020/04/16)
# 参考资料：RUNOOB
# Version: 1, Last Modified: 2020/04/17
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################


##############################################################################
# 加速
##############################################################################
网易：  https://hub-mirror.c.163.com/
阿里云：https://<你的ID>.mirror.aliyuncs.com
Upstart:
    在/etc/default/docker里加入
        DOCKER_OPTS="--registry-mirror=https://xxxxxxx.com/
    后重启服务
        sudo service docker restart
Systemd:
    在/etc/docker/daemon.json里加入
        {"registry-mirrors":["https://reg-mirror.qiniu.com/"]}
    后重新启动服务
        sudo systemctl daemon-reload
        sudo systemctl restart docker
Windows:
    在Settings->Daemon里Registrymirrors一栏使用
        https://registry.docker-cn.com
Mac OS:
    在Perferences...->Daemon->Registrymirrors里使用
        https://reg-mirror.qiniu.com


##############################################################################
# 镜像
##############################################################################
docker login img                                           # 登录到远程仓库
docker logout img                                          # 登出到远程仓库
docker search img                                          # 查找镜像
docker pull img                                            # 拉取（下载）镜像
docker push img[:tag]                                      # 推送镜像
docker images                                              # 查看已拉取的镜像
docker rmi img                                             # 删除镜像
docker history img                                         # 查看指定镜像的创建历史
docker commit -a author -m message -p container img        # 从容器创建镜像，-p为创建时停止容器
docker build [OPT] PATH                                    # 从Dockerfile创建镜像
    # OPT详解
    # --build-arg=[]          : 设置镜像创建时的变量
    # --cpu-shares            : 设置CPU使用权重
    # --cpu-period            : 限制CPU CFS周期
    # --cpu-quota             : 限制CPU CFS配额
    # --cpuset-cpus           : 指定使用的CPUid
    # --cpuset-mems           : 指定使用的内存id
    # --disable-content-trust : 忽略校验，默认开启
    # -f                      : 指定要使用的Dockerfile路径
    # --force-rm              : 设置镜像过程中删除中间容器
    # --isolation             : 使用容器隔离技术
    # --label=[]              : 设置镜像使用的元数据
    # -m                      : 设置内存最大值
    # --memory-swap           : 设置Swap的最大值为内存+swap，"-1"表示不限swap
    # --no-cache              : 创建镜像的过程不使用缓存
    # --pull                  : 尝试去更新镜像的新版本
    # --quiet, -q             : 安静模式，成功后只输出镜像 ID
    # --rm                    : 设置镜像成功后删除中间容器
    # --shm-size              : 设置/dev/shm的大小，默认值是64M
    # --ulimit                : Ulimit配置
    # --tag, -t               : 镜像的名字及标签
    # --network               : 默认 default。在构建期间设置RUN指令的网络模式
docker save img -o xxx                                     # 将指定镜像归档为tar文件
docker load img -i xxx                                     # 加载镜像归档文件（必须为save创建的）
docker tag img[:tag] [registryhost/][username/]name[:tag]  # 标记本地镜像
docker export img -o xxx                                   # 将指定镜像归档为tar文件
docker import xxx img                                      # 加载镜像归档文件（必须为export创建的）


##############################################################################
# 容器
##############################################################################
# 创建并启动容器
                  参数              路径映射              容器名称      指令
docker run -it -d -e xxx --link xxx -v ~/:~/ -p 8088:8088 --name=xxx img command
               后台      连接容器            端口映射                镜像ID
               运行
docker create --name=xxx container                                                            # 创建但不启动容器
docker stop container                                                                         # 暂停容器
docker start container                                                                        # 启动容器
docker restart container                                                                      # 重启容器
docker kill container                                                                         # 杀掉一个运行中的容器
docker pause container                                                                        # 暂停容器中的所有进程
docker unpause container                                                                      # 回复容器中的所有进程
docker rm container                                                                           # 删除容器（已暂停运行）
docker exec -it container command                                                             # 进入容器
docker ps -a -f 过滤字段                                                                      # 查看所有容器
docker logs container                                                                         # 查看容器日志
docker wait container                                                                         # 阻塞运行直到容器停止，然后打印出它的退出代码
docker port container                                                                         # 查看容器的端口映射情况
docker inspect --type container                                                               # 获取容器元数据，--type参数输出为json格式
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container  # 获取指定正在运行的容器IP
docker top container                                                                          # 查看容器进程运行情况
for i in  `docker ps |grep Up|awk '{print $1}'`;do echo \ &&docker top $i; done               # 获取全部运行容器的进程信息
docker events                                                                                 # 从服务器获取实时事件，--since限制开始时间，--until限制结束时间
docker cp FILE container:PATH                                                                 # 从主机拷贝文件到容器


##############################################################################
# 其他
##############################################################################
docker info     # 显示 Docker 系统信息，包括镜像和容器数
docker version  # 显示 Docker 版本信息

